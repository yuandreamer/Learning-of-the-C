/*Learning-of-the-C*/
# include <stdio.h>
#include <malloc.h>
#include <string.h>
#include <stdlib.h>

/*定义链表节点*/
typedef struct Node{
	int idata;
	struct Node *next;
} 

/*初始化链表*/
void initlist(Node **pNode)
{
	*pNode = NULL;
	printf("链表初始化成功");
}

/*创建链表*/
Node *creatList(Node *phead)
{
	Node *p1;
	Node *p2;
	
	p1=p2=(Node *)malloc(sizeof(Node));
	if(p1 == NULL || p2 == NULL)
	{
		printf("内存分配失败")；
		exit(0);
	}
	
	memset(p1,0,sizeof(Node));
	
	scanf("%d",&p1->idata);
	p1->next = NULL;
	
	while(p1->idata > 0)
	{
		if(phead == NULL)
		{
			phead = p1;
		}
		else
		{
			p2->next = p1;
		}
		
		p2 = p1;
		p1 = (Node *)malloc(sizeof(Node));
		if(p1 == NULL || p2 == NULL)
		{
			printf("内存分配失败")；
			exit(0);
		}
		
		memset(p1,0,sizeof(Node));
	
		scanf("%d",&p1->idata);
		p1->next = NULL;
	}
	printf("creatList执行成功，链表创建成功")；
	return phead;
}

/*遍历链表*/
void PrintList(Node *phead)
{
	if(NULL == phead)
	{
		printf("PrintList执行，空链表\n");
	}
	else
	{
		while(NULL != phead)
		{
			printf("%d",phead->idata);
			phead = phead->next;
		}
		printf("\n")
	}
}

/*清空链表*/
void ClearList(Node *phead)
{
	Node *p;
	
	if(phead == NULL)
	{
		printf("ClearList执行，链表为空")；
		return;
	}
	
	while(phead->next != NULL)
	{
		p = phead->next;
		free(phead);
		phead = p;
	}
	printf("ClearList执行，链表为空");
}

/*表头插入数据*/
int insertHeadList(Node **phead,int insertdata)
{
	Node *p;
	p = (Node *)malloc(sizeof(Node));
	memset(p,0,sizeof(Node));
	p->idata = insertdata;
	p->next = *phead;
	*phead = p;
	
	printf("insertHeadList执行");
	return 1;
}

/*表尾插入数据*/
int insertLastList(Node **phead, int insertdata)
{
	Node *p1;
	Node *p2;
	Node *p3;
	
	p1 = *phead;
	p2 = p1;
	p3 = (Node *)malloc(sizeof(Node));
	memset(p3,0,sizeof(Node));
	p3->idata = insertdata;
	
	while(p1->next != NULL)
	{
		p1=p1->next;
	}
	p1->next = p3;
	*phead = p2;
	printf("insertLastList执行")；
	
	return 1;
}
